Perfect üëè ‚Äî here‚Äôs a **ready-to-paste Replit prompt block** that will automatically configure your project so **ChatGPT can create Pull Requests (PRs) on GitHub** using your stored `GITHUB_TOKEN`.

This prompt will:

* Create a **`agent_pr.py`** automation script,
* Set permissions & environment setup,
* Configure the `.replit` file to allow easy triggering,
* And verify connectivity to your repo `LocalAIChatApp-`.

---

### üß† **Prompt for Replit (Copy & Paste)**

````
You are to enable full GitHub PR automation for this Replit project so that ChatGPT can push changes directly to GitHub instead of me copy-pasting code manually.

Follow these steps exactly:

1. Create a file named `agent_pr.py` in the project root with this full script:
   ```python
   from github import Github
   import os, datetime, sys

   # Repository configuration
   REPO_NAME = "ChefBones323/LocalAIChatApp-"
   TOKEN = os.getenv("GITHUB_TOKEN")

   if not TOKEN:
       sys.exit("‚ùå Missing GITHUB_TOKEN environment variable. Please add it in Replit Secrets.")

   print("üîë Authenticating with GitHub...")
   g = Github(TOKEN)
   repo = g.get_repo(REPO_NAME)

   # Create new branch with timestamp
   branch_name = f"chatgpt-update-{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}"
   base = repo.get_branch("main")

   print(f"üåø Creating branch: {branch_name}")
   repo.create_git_ref(ref=f"refs/heads/{branch_name}", sha=base.commit.sha)

   # Example: update a file
   FILE_PATH = "main.py"
   print(f"üìÇ Updating file: {FILE_PATH}")
   file_content = repo.get_contents(FILE_PATH, ref="main")
   new_code = file_content.decoded_content.decode() + f"\n# Update committed automatically by ChatGPT on {datetime.datetime.now()}\n"

   repo.update_file(
       path=FILE_PATH,
       message=f"Automated update by ChatGPT agent on {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
       content=new_code,
       sha=file_content.sha,
       branch=branch_name
   )

   print("üì¶ Creating Pull Request...")
   repo.create_pull(
       title=f"ChatGPT Automated Update ({datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')})",
       body="This pull request was automatically generated by ChatGPT using your GitHub token in Replit.",
       head=branch_name,
       base="main"
   )

   print("‚úÖ Pull Request created successfully! Check your GitHub repo to review and merge.")
````

2. Give the script permission to run:

   ```bash
   chmod +x agent_pr.py
   ```

3. Edit your `.replit` file to include a **new custom command** for this script:

   ```ini
   [env]
   GITHUB_TOKEN = "${GITHUB_TOKEN}"

   [scripts]
   pr = "python3 agent_pr.py"
   ```

   ‚úÖ This adds a command alias `pr` that you can run anytime in the Replit shell using:

   ```
   run pr
   ```

4. Confirm the GitHub remote is correctly set:

   ```bash
   git remote -v
   ```

   It must show:

   ```
   https://github.com/ChefBones323/LocalAIChatApp-.git
   ```

5. Test the setup:

   ```bash
   python3 agent_pr.py
   ```

   or

   ```bash
   run pr
   ```

   You should see:

   ```
   ‚úÖ Pull Request created successfully!
   ```

Once complete, ChatGPT can push updates to your repo automatically by running the `pr` command. Each change will appear as a new Pull Request in your GitHub dashboard under **Pull Requests ‚Üí ‚ÄúChatGPT Automated Update‚Äù**.

```

---

### üí° Next Level (Optional)
I can extend this automation so that ChatGPT:
- Creates **branch-specific PRs** for different modules (e.g., GUI, API, database).  
- Writes **change summaries** automatically from the file diff.  
- Tags each PR with `AI-generated` and assigns it to you for review.

Would you like me to include those advanced features in the PR automation prompt next?
```
